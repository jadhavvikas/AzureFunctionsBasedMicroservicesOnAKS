using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using IHttpClientFactory = System.Net.Http.IHttpClientFactory;

using AzureFunctions.Extensions.Swashbuckle.Attribute;
using Gremlin.Net.Driver;
using Gremlin.Net.Driver.Exceptions;
using Microsoft.ApplicationInsights;
using Microsoft.ApplicationInsights.Extensibility;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;

using RevolutionPlatform.RPLHelpers;
using RevolutionPlatform.RPLCommon;

namespace SampleServices.Services.UserService
{
    public class CreateUser : UserServiceBase
    {
        public CreateUser(IHttpClientFactory httpClientFactory, IGremlinClient gremlinClient, IB2CGraphClient b2cGraphClient, TelemetryConfiguration telemetryConfiguration) : base(httpClientFactory, gremlinClient, b2cGraphClient, telemetryConfiguration)
        {
            // Calls base
        }

        [ProducesResponseType((int)HttpStatusCode.Created, Type = typeof(User[]))]
        [ProducesResponseType((int)HttpStatusCode.Conflict)]
        [ProducesResponseType((int)HttpStatusCode.BadRequest)]
        [FunctionName("CreateUser")]
        public async Task<IActionResult> Run(
            [HttpTrigger(AuthorizationLevel.Anonymous, "post", Route = "users")]
            [RequestBodyType(typeof(User), "User")]
            HttpRequest req, ILogger log, ExecutionContext context)
        {
            log.LogInformation($"{context?.FunctionName} processed a HTTP request.");
            // TelemetryClient.Context.Operation.Id = context?.InvocationId.ToString(); // No longer needed?

            string requestBody = new StreamReader(req.Body).ReadToEnd();
            var user = JsonConvert.DeserializeObject<User>(requestBody);

            if (user is null)
                return new BadRequestObjectResult("No user definition specified in body.");

            if (string.IsNullOrWhiteSpace(user.Id))
                user.Id = Guid.NewGuid().ToString();

            if (string.IsNullOrWhiteSpace(user.PartitionKey))
                user.PartitionKey = user.Id;

            if (string.IsNullOrWhiteSpace(user.DocumentType))
                user.DocumentType = "user";

            var missingProperties = new List<string>();


            // Check required user properties are present otherwise return 400.

            if (string.IsNullOrWhiteSpace(user.PrimaryEmailAddress))
                missingProperties.Add("primaryEmailAddress");
            if (string.IsNullOrWhiteSpace(user.FirstName))
                missingProperties.Add("firstName");
            if (string.IsNullOrWhiteSpace(user.LastName))
                missingProperties.Add("lastName");

            if (missingProperties.Count > 0)
                return new BadRequestObjectResult($"User definition is missing required properties... {((missingProperties.Count > 1) ? string.Join(", ", missingProperties) : missingProperties[0])}.");


            // CHECK USER NOT IN GRAPH

            try
            {
                var filterProperties = new { userName = user.UserName, primaryEmailAddress = user.PrimaryEmailAddress };
                var query = GremlinHelper.GetVertexQuery(filterProperties, true);
                var response = new GraphResponse(await GremlinClient.SubmitAsync<dynamic>(query));

                GremlinHelper.ThrowIfResponseInvalid(response);

                if (response.Entities != null && response.Entities.Count() > 0)
                    return new ConflictObjectResult("User already exists (graph).");
            }
            catch (ResponseException ex)
            {
                GremlinHelper.HandleGraphResponseException(ex, log, context, TelemetryClient);
            }
            catch (Exception ex)
            {
                GremlinHelper.HandleGeneralException(ex, log, context, TelemetryClient);
            }


            // CREATE USER ON B2C

            if (string.IsNullOrWhiteSpace(user.Password))
            {
                user.Password = Guid.NewGuid().ToString();
                user.CustomProperties.Add("PasswordAutoGenerated", "true");
            }

            var b2cUser = new B2CUser()
            {
                DisplayName = user.Id, // We do not store user profile data on B2C identity - simply use the customer user id for display name.
                UserAttribute_CustomerUserId = user.Id,
                SignInNames = new List<B2CSignInName>() {
                        new B2CSignInName() { Type = "emailAddress", Value = user.PrimaryEmailAddress }
                    },
                PasswordProfile = new B2CPasswordProfile()
                {
                    Password = user.Password,
                    ForceChangePasswordNextLogin = false
                }
            };

            // Remove password value from user object.
            user.Password = null;

            try
            {
                var b2cCreatedUserResult = await B2CGraphClient.CreateUser(b2cUser, log);
                var b2cCreatedUser = JsonConvert.DeserializeObject<dynamic>(b2cCreatedUserResult);
                user.IdentityId = b2cCreatedUser?.objectId;
                user.UserStatus = UserStatus.Active;
            }
            catch (B2CUserExistsException)
            {
                // User already exists on B2C
                return new ConflictObjectResult("User already exists (identity).");
            }
            catch (B2CPasswordComplexityException)
            {
                return new BadRequestObjectResult("The specified password does not comply with password complexity requirements. Please provide a different password.");
            }
            catch (Exception ex)
            {
                var ignoreTask = Task.Run(() =>
                {
                    log.LogError($"{context?.FunctionName} Create B2C User Error: {ex.Message}");
                    TelemetryClient.TrackException(ex, new Dictionary<string, string>() { { "ExceptionType", "B2CUserCreateError" }, { "UserName", user?.UserName }, { "EmailAddress", user?.PrimaryEmailAddress } }, null);
                });

                return new OkObjectResult("Failed to create user (identity).") { StatusCode = 500 };
            }


            // CREATE USER IN GRAPH

            try
            {
                var query = GremlinHelper.CreateVertexQuery(user, log);
                var response = new GraphResponse(await GremlinClient.SubmitAsync<dynamic>(query));

                GremlinHelper.ThrowIfResponseInvalid(response);

                GremlinHelper.GraphTelemetryEvent(TelemetryClient, "GraphVertexCreate", response, "vertex", "user");

                user = response.GetEntityAsType<User>();
            }
            catch (ResponseException ex)
            {
                GremlinHelper.HandleGraphResponseException(ex, log, context, TelemetryClient);
            }
            catch (Exception ex)
            {
                GremlinHelper.HandleGeneralException(ex, log, context, TelemetryClient);
            }

            return user != null ?
                new OkObjectResult(user) { StatusCode = 201 } :
                new OkObjectResult("Failed to create user.") { StatusCode = 500 };
        }
    }
}